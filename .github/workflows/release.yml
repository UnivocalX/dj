name: Python App Release
run-name: "Run #${{ github.run_id }} on ${{ github.ref_name }} triggered by ${{ github.event_name }} | Commit: ${{ github.event.head_commit.message }}"

on:
  push:
    branches:
      - main
      - "major/**"
      - "feat/**"
      - "patch/**"
      - "experiment/**"
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - ".github/workflows/**"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      PYTHON_VERSION: "3.12"
      RUFF_TARGET_VERSION: "py312"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Debug
        run: |
          echo "PWD: $(pwd)"
          ls -l
          cat pyproject.toml

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Setup Tools
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.1.3
          poetry config virtualenvs.create false
          poetry install

      - name: Lint
        run: |
          poetry run ruff --version
          poetry run ruff check --fix

      - name: Type Checks
        run: |
          poetry run mypy --version
          poetry run mypy src/ --config-file pyproject.toml --ignore-missing-imports --python-version ${{ env.PYTHON_VERSION }}

      - name: Tests
        run: |
          export PYTHONPATH=${{ github.workspace }}
          export CI=true
          pytest tests/

      - name: Format
        run: |
          ruff format

      - name: Version Increment
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Running on main branch - extracting branch name from commit"
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"
            BRANCH_NAME=$(echo "$COMMIT_MSG" | grep -oE "from [^/[:space:]]+/[^[:space:]]+" | cut -d' ' -f2 | head -1)
            if [[ -z "$BRANCH_NAME" ]]; then
              BRANCH_NAME=$(echo "$COMMIT_MSG" | grep -oE "branch '[^']+'" | sed "s/branch '\(.*\)'/\1/" | head -1)
            fi
            if [[ -n "$BRANCH_NAME" ]]; then
              echo "Detected branch: $BRANCH_NAME"
              if [[ "$BRANCH_NAME" == major/* ]]; then
                echo "Major branch detected - bumping major version"
                poetry version major
              elif [[ "$BRANCH_NAME" == feat/* ]]; then
                echo "Feature branch detected - bumping minor version"
                poetry version minor
              else
                echo "Patch branch detected - bumping patch version"
                poetry version patch
              fi
            else
              echo "No branch name detected - bumping patch version"
              poetry version patch
            fi
          else
            echo "Not on main branch (${{ github.ref_name }}) - using prerelease versioning"
            poetry version prerelease
          fi

      - name: Commit Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -u
          git add pyproject.toml
          git diff --cached --quiet || git commit -m "Apply formatting and bump version [skip ci]"

      - name: Push Changes
        if: github.ref_name != 'main'
        run: |
          git push

      - name: Pull Request
        if: github.ref_name == 'main'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Apply formatting and bump version [skip ci]"
          branch: "ci/format-and-bump"
          title: "CI: Format and bump version"
          body: "Automated formatting and version bump by CI"
          base: main
          delete-branch: true

      - name: Merge
        if: github.ref_name == 'main'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
          merge-method: SQUASH

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Build release distributions with Poetry
        run: |
          poetry install --no-root
          poetry build

      - name: Upload release dists
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/